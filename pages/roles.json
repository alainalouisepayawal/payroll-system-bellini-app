{
  "name": "roles",
  "type": "page",
  "url": "/roles",
  "params": {},
  "variables": [
    {
      "name": "payrollSystemApi",
      "type": "open-api",
      "id": "660ce923f871b7b8ec68d74e"
    },
    {
      "name": "rolesArray",
      "type": "array",
      "description": "This is the array that holds the fetched data from the API",
      "children": []
    },
    {
      "name": "getAllRoles",
      "type": "method",
      "description": "Function to get all roles data from the API",
      "body": "// Function to fetch roles data for a specific page\nfunction fetchRolesForPage(pageNumber) {\n    const startIndex = (pageNumber - 1) * $ctrl.pagination.pageSize;\n    const endIndex = startIndex + $ctrl.pagination.pageSize;\n    $ctrl.payrollSystemApi.employee_services_role_GetAllRoles({\n        ngrokSkipBrowserWarning: 'toro'\n    }).then(result => {\n        $ctrl.rolesArray =  result.data.roles;\n        if (result.data.roles && Array.isArray(result.data.roles)) {\n            $ctrl.pagination.totalPages = Math.ceil(result.data.roles.length / $ctrl.pagination.pageSize);\n            $ctrl.pagination.paginatedRoles = result.data.roles.slice(startIndex, endIndex);\n        } else {\n            $ctrl.totalPages = 0;\n            $ctrl.pagination.paginatedRoles = [];\n        }\n    }).catch(error => {\n        console.error('Error fetching paginated roles data:', error);\n    });\n}\n\n// Fetch roles data for the initial page\nfetchRolesForPage($ctrl.pagination.currentPage);\n",
      "invokeOnLoad": true,
      "isAsync": false,
      "returnType": {
        "name": "any"
      },
      "parameters": []
    },
    {
      "name": "isLoading",
      "type": "property",
      "description": "",
      "value": "true"
    },
    {
      "name": "props",
      "type": "object",
      "description": "",
      "properties": [
        {
          "name": "isCreating",
          "type": "property",
          "description": "",
          "value": ""
        },
        {
          "name": "isUpdating",
          "type": "property",
          "description": "",
          "value": ""
        },
        {
          "name": "isDeleting",
          "type": "property",
          "description": "",
          "value": ""
        }
      ]
    },
    {
      "name": "clickEvents",
      "type": "object",
      "description": "Handles all the clickEvents (CRUD operations) of the Roles Page",
      "properties": [
        {
          "name": "handleCreate",
          "type": "method",
          "description": "This is the function to create new role title using /POST",
          "body": "$ctrl.props.isCreating = true; // Set isCreating to true before opening the modal\n\n$ctrl.$modal.open(\"new-role\", {\n    type: \"New Role Title\"\n}, {\n    style: { animation: \"400ms sample-animation ease\" }\n}).then(({ result, roleTitle, requiredHours, shiftIn, shiftOut, payRate, overtimeMultiplier, payCurrency, payGroupName }) => {\n   if (result !== 'ok') {\n       $ctrl.props.isCreating = false;\n       return;\n   }\n   $ctrl.payrollSystemApi.employee_services_role_CreateRole(\n    {   ngrokSkipBrowserWarning: 'toro' },\n    {\n        roleTitle: roleTitle,\n        requiredHours: requiredHours,\n        shiftIn: shiftIn,\n        shiftOut: shiftOut,\n        payRate: payRate,\n        overtimeMultiplier: overtimeMultiplier,\n        payCurrency: payCurrency,\n        payGroupName: payGroupName    \n    }\n   ).then(({ data }) => {\n       // Push the new paygroup data into the array\n       $ctrl.$notificationManager.show(\"Successfully created the new role title\", {\n           delay: 2500,\n           icon: 'check',\n           color: 'success',\n       });\n       if (!$ctrl.rolesArray) {\n           $ctrl.rolesArray = []; // Initialize if it doesn't exist\n       }\n       $ctrl.rolesArray.push(data);\n       // Fetch the new array of data after pushing\n       fetchNewData();\n   }).finally(() => {\n       $ctrl.props.isCreating = false;\n   });\n}).catch(error => {\n    console.error('Error opening new-role modal:', error);\n    // Show error notification\n    console.log(\"Error notification should be shown for modal opening error\");\n    $ctrl.$notificationManager.show('An error occurred while opening the new-role modal', {\n        delay: 3500,\n        icon: 'exclamation-circle',\n        color: 'danger'\n    });\n}).finally(() => {\n    // Reset isCreating to false after the modal is closed\n    $ctrl.props.isCreating = false;\n});\n\nfunction fetchNewData() {\n    $ctrl.payrollSystemApi.employee_services_role_GetAllRoles({\n        ngrokSkipBrowserWarning: 'toro'\n    }).then(result => {\n        $ctrl.pagination.paginatedRoles = result.data.roles\n    }).catch(error => {\n        console.error('Error fetching new data:', error);\n        // Show error notification\n        $ctrl.$notificationManager.show('An error occurred while fetching new data', {\n            delay: 3500,\n            icon: 'exclamation-circle',\n            color: 'danger'\n        });\n    });\n}\n\n\n",
          "invokeOnLoad": false,
          "isAsync": false,
          "returnType": {
            "name": "any"
          },
          "parameters": []
        },
        {
          "name": "handleDelete",
          "type": "method",
          "description": "This is the function to delete existing role title using /DELETE",
          "body": "$ctrl.props.isDeleting = true; // Set isCreating to true before opening the modal\n\n$ctrl.$modal.open(\"delete-role\", {\n    type: \"Delete Role Title\"\n}, {\n    style: { animation: \"400ms sample-animation ease\" }\n}).then(({ result }) => {\n   if (result !== 'ok') {\n       $ctrl.props.isDeleting = false;\n       return;\n   }\n   $ctrl.payrollSystemApi.employee_services_role_DeleteRole({\n    ngrokSkipBrowserWarning: 'toro',\n    roleTitle: $ctrl.selected.selectedRole.roleTitle\n   }).then(() => {\n       // Process the result if needed\n       console.log('Role deleted successfully');\n       $ctrl.$notificationManager.show(\"Role Title deleted successfully\", {\n           delay: 2500,\n           icon: 'check',\n           color: 'success',\n       });\n\n\n       fetchNewData();\n   }).catch(error => {\n       console.error('Error deleting paygroup:', error);\n       // Show error notification\n       $ctrl.$notificationManager.show(\"An error occurred while deleting the selected paygroup\", {\n           delay: 3500,\n           icon: 'exclamation-circle',\n           color: 'danger'\n       });\n   }).finally(() => {\n       $ctrl.props.isDeleting = false;\n       fetchNewData();\n   });\n}).catch(error => {\n   console.error('Error opening delete-paygroup modal:', error);\n   // Show error notification\n   $ctrl.$notificationManager.show('An error occurred while opening the delete-paygroup modal', {\n       delay: 3500,\n       icon: 'exclamation-circle',\n       color: 'danger'\n   });\n   $ctrl.props.isDeleting = false;\n});\n\n\nfunction fetchNewData() {\n$ctrl.payrollSystemApi.employee_services_role_GetAllRoles({\n       ngrokSkipBrowserWarning: 'toro'\n  }).then(result => {\n $ctrl.pagination.paginatedRoles = result.data.roles\n  }).catch(error => {\n       console.error('Error fetching new data:', error);\n       // Show error notification\n       $ctrl.$notificationManager.show('An error occurred while fetching new data', {\n           delay: 3500,\n           icon: 'exclamation-circle',\n           color: 'danger'\n       });\n   });\n}\n",
          "invokeOnLoad": false,
          "isAsync": false,
          "returnType": {
            "name": "any"
          },
          "parameters": []
        },
        {
          "name": "handleUpdate",
          "type": "method",
          "description": "This is the function to edit or update existing role title using /PUT",
          "body": "$ctrl.props.isUpdating = true; // Set isUpdating to true before opening the modal\n\n$ctrl.$modal.open(\"update-role\", {\n    type: \"Update Role Title\",\n    roleTitle: $ctrl.selected.selectedRole.roleTitle,\n    requiredHours: $ctrl.selected.selectedRole.requiredHours,\n    shiftIn: $ctrl.selected.selectedRole.shiftIn,\n    shiftOut: $ctrl.selected.selectedRole.shiftOut,\n    payRate: $ctrl.selected.selectedRole.payRate,\n    overtimeMultiplier: $ctrl.selected.selectedRole.overtimeMultiplier,\n    payCurrency: $ctrl.selected.selectedRole.payCurrency,    \n    payGroupName: $ctrl.selected.selectedRole.payGroupName,\n}, {\n    style: { animation: \"400ms sample-animation ease\" }\n}).then(({ result, roleTitle, requiredHours, shiftIn, shiftOut, payRate, overtimeMultiplier, payCurrency, payGroupName }) => {\n   if (result !== 'ok') {\n       $ctrl.props.isUpdating = false;\n   } else {\n       // Construct the body object with updated payrollPeriod\n       const body = {\n            roleTitle: roleTitle,\n            requiredHours: requiredHours,\n            shiftIn: shiftIn,\n            shiftOut: shiftOut,\n            payRate: payRate,\n            overtimeMultiplier: overtimeMultiplier,\n            payCurrency: payCurrency,\n            payGroupName: payGroupName\n       };\n\n       // Call the API to update the role\n       $ctrl.payrollSystemApi.employee_services_role_UpdateRole(\n        {\n            ngrokSkipBrowserWarning: 'toro',\n            roleTitle: $ctrl.selected.selectedRole.roleTitle\n        },\n        body\n       ).then(result => {\n        console.log('Response:', result);\n           $ctrl.$notificationManager.show(\"Role updated successfully\", {\n               delay: 2500,\n               icon: 'check',\n               color: 'success'\n           });\n\n            // Optionally, update the selected paygroup's payroll_period in your UI\n\n           // $ctrl.selected.selectedPaygroup.payroll_period = payrollPeriod;\n       }).catch(error => {\n           // Handle errors here\n           console.error('Error:', error);\n           $ctrl.$notificationManager.show(\"An error occurred while updating the selected role\", {\n               delay: 3500,\n               icon: 'exclamation-circle',\n               color: 'danger'\n           });\n       });\n   }\n}).catch(error => {\n   // Handle errors opening the modal\n   console.error('Error opening update-paygroup modal:', error);\n   // Show error notification\n   $ctrl.$notificationManager.show('An error occurred while opening the update-paygroup modal', {\n       delay: 3500,\n       icon: 'exclamation-circle',\n       color: 'danger'\n   });\n}).finally(() => {\n   // Reset isUpdating to false after the modal is closed\n   $ctrl.props.isUpdating = false;\n});\n",
          "invokeOnLoad": false,
          "isAsync": false,
          "returnType": {
            "name": "any"
          },
          "parameters": []
        }
      ]
    },
    {
      "name": "$notificationManager",
      "type": "service"
    },
    {
      "name": "$modal",
      "type": "service"
    },
    {
      "name": "selected",
      "type": "object",
      "description": "",
      "properties": [
        {
          "name": "selectedRole",
          "type": "property",
          "description": "",
          "value": ""
        },
        {
          "name": "selectRole",
          "type": "method",
          "description": "",
          "body": "$ctrl.selected.selectedRole = row",
          "invokeOnLoad": false,
          "isAsync": false,
          "returnType": {
            "name": "any"
          },
          "parameters": [
            "row"
          ]
        }
      ]
    },
    {
      "name": "pagination",
      "type": "object",
      "description": "",
      "properties": [
        {
          "name": "currentPage",
          "type": "property",
          "description": "",
          "value": "1"
        },
        {
          "name": "totalPages",
          "type": "property",
          "description": "",
          "value": ""
        },
        {
          "name": "pageSize",
          "type": "property",
          "description": "",
          "value": "10"
        },
        {
          "name": "paginatedRoles",
          "type": "property",
          "description": "",
          "value": ""
        }
      ]
    }
  ],
  "children": [
    {
      "name": "div",
      "nodeName": "div",
      "elementId": "",
      "attributes": [
        {
          "property": "data-id",
          "value": "Ny6r8O"
        }
      ],
      "classList": [
        "navbar"
      ],
      "conditionalClasses": [],
      "contentType": "text",
      "displayExpression": "",
      "events": {},
      "iterate": {
        "array": "",
        "variable": "",
        "trackByIndex": false
      },
      "styles": [],
      "children": [
        {
          "name": "navigation-bar",
          "nodeName": "navigation-bar",
          "elementId": "",
          "attributes": [
            {
              "property": "data-id",
              "value": "V6KlKI"
            }
          ],
          "classList": [],
          "conditionalClasses": [],
          "contentType": "text",
          "displayExpression": "",
          "events": {},
          "iterate": {
            "array": "",
            "variable": "",
            "trackByIndex": false
          },
          "styles": [],
          "children": [],
          "comments": "",
          "type": "custom-component",
          "id": "660dfc67f871b7b8ec68d766",
          "expressions": []
        }
      ],
      "comments": ""
    },
    {
      "name": "div",
      "nodeName": "div",
      "elementId": "",
      "attributes": [
        {
          "property": "data-id",
          "value": "31gj8j"
        }
      ],
      "classList": [
        "header"
      ],
      "conditionalClasses": [],
      "contentType": "text",
      "displayExpression": "",
      "events": {},
      "iterate": {
        "array": "",
        "variable": "",
        "trackByIndex": false
      },
      "styles": [
        {
          "property": "width",
          "value": "90%",
          "enabled": true
        },
        {
          "property": "margin",
          "value": "0 auto",
          "enabled": true
        },
        {
          "property": "color",
          "value": "#17252A",
          "enabled": true
        },
        {
          "property": "padding-top",
          "value": "50px",
          "enabled": true
        },
        {
          "property": "display",
          "value": "flex",
          "enabled": true
        }
      ],
      "children": [
        {
          "name": "h1",
          "nodeName": "h1",
          "elementId": "",
          "attributes": [
            {
              "property": "data-id",
              "value": "z9pGT9"
            }
          ],
          "classList": [],
          "conditionalClasses": [],
          "contentType": "text",
          "displayExpression": "",
          "events": {},
          "iterate": {
            "array": "",
            "variable": "",
            "trackByIndex": false
          },
          "styles": [
            {
              "property": "margin",
              "value": "0",
              "enabled": true
            },
            {
              "property": "width",
              "value": "70%",
              "enabled": true
            }
          ],
          "children": [
            {
              "name": "text",
              "nodeName": "text",
              "textContent": "Roles",
              "evaluate": false
            }
          ],
          "comments": ""
        },
        {
          "name": "div",
          "nodeName": "div",
          "elementId": "",
          "attributes": [
            {
              "property": "data-id",
              "value": "PrQR4Y"
            }
          ],
          "classList": [
            "buttons-container"
          ],
          "conditionalClasses": [],
          "contentType": "text",
          "displayExpression": "",
          "events": {},
          "iterate": {
            "array": "",
            "variable": "",
            "trackByIndex": false
          },
          "styles": [
            {
              "property": "width",
              "value": "30%",
              "enabled": true
            },
            {
              "property": "text-align",
              "value": "right",
              "enabled": true
            }
          ],
          "children": [
            {
              "name": "Button",
              "nodeName": "bln-button",
              "elementId": "",
              "attributes": [
                {
                  "property": "core",
                  "value": ""
                },
                {
                  "property": "data-id",
                  "value": "L0DJDp"
                }
              ],
              "classList": [],
              "conditionalClasses": [],
              "contentType": "text",
              "displayExpression": "",
              "events": {},
              "iterate": {
                "array": "",
                "variable": "",
                "trackByIndex": false
              },
              "styles": [
                {
                  "property": "--bln-button-default-bg-color",
                  "value": "#3aafa9",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-hovered-bg-color",
                  "value": "#2e8c87",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-active-bg-color",
                  "value": "#297b76",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-text-color",
                  "value": "#ffffff",
                  "enabled": true
                },
                {
                  "property": "--bln-button-padding",
                  "value": "7px 25px",
                  "enabled": true
                }
              ],
              "children": [],
              "comments": "",
              "type": "core-component",
              "id": "button",
              "expressions": [
                {
                  "expression": "\"New\"",
                  "to": "label"
                },
                {
                  "expression": "$ctrl.props.isCreating",
                  "to": "showLoading"
                },
                {
                  "expression": "$ctrl.clickEvents.handleCreate()",
                  "to": "onClick"
                }
              ]
            },
            {
              "name": "Button",
              "nodeName": "bln-button",
              "elementId": "",
              "attributes": [
                {
                  "property": "core",
                  "value": ""
                },
                {
                  "property": "data-id",
                  "value": "fM09Np"
                }
              ],
              "classList": [],
              "conditionalClasses": [],
              "contentType": "text",
              "displayExpression": "",
              "events": {},
              "iterate": {
                "array": "",
                "variable": "",
                "trackByIndex": false
              },
              "styles": [
                {
                  "property": "--bln-button-default-bg-color",
                  "value": "#3aafa9",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-hovered-bg-color",
                  "value": "#2e8c87",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-active-bg-color",
                  "value": "#297b76",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-text-color",
                  "value": "#ffffff",
                  "enabled": true
                },
                {
                  "property": "--bln-button-padding",
                  "value": "7px 18px",
                  "enabled": true
                }
              ],
              "children": [],
              "comments": "",
              "type": "core-component",
              "id": "button",
              "expressions": [
                {
                  "expression": "\"Update\"",
                  "to": "label"
                },
                {
                  "expression": "$ctrl.clickEvents.handleUpdate()",
                  "to": "onClick"
                },
                {
                  "expression": "$ctrl.props.isUpdating",
                  "to": "showLoading"
                }
              ]
            },
            {
              "name": "Button",
              "nodeName": "bln-button",
              "elementId": "",
              "attributes": [
                {
                  "property": "core",
                  "value": ""
                },
                {
                  "property": "data-id",
                  "value": "2545S6"
                }
              ],
              "classList": [],
              "conditionalClasses": [],
              "contentType": "text",
              "displayExpression": "",
              "events": {},
              "iterate": {
                "array": "",
                "variable": "",
                "trackByIndex": false
              },
              "styles": [
                {
                  "property": "--bln-button-default-bg-color",
                  "value": "#3aafa9",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-hovered-bg-color",
                  "value": "#2e8c87",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-active-bg-color",
                  "value": "#297b76",
                  "enabled": true
                },
                {
                  "property": "--bln-button-default-text-color",
                  "value": "#ffffff",
                  "enabled": true
                },
                {
                  "property": "--bln-button-padding",
                  "value": "7px 20px",
                  "enabled": true
                },
                {
                  "property": "--bln-button-primary-active-text-color",
                  "value": "#080808",
                  "enabled": true
                }
              ],
              "children": [],
              "comments": "",
              "type": "core-component",
              "id": "button",
              "expressions": [
                {
                  "expression": "\"Delete\"",
                  "to": "label"
                },
                {
                  "expression": "$ctrl.props.isDeleting",
                  "to": "showLoading"
                },
                {
                  "expression": "$ctrl.clickEvents.handleDelete()",
                  "to": "onClick"
                }
              ]
            }
          ],
          "comments": ""
        }
      ],
      "comments": ""
    },
    {
      "name": "hr",
      "nodeName": "hr",
      "elementId": "",
      "attributes": [
        {
          "property": "data-id",
          "value": "iyxWWW"
        }
      ],
      "classList": [],
      "conditionalClasses": [],
      "contentType": "text",
      "displayExpression": "",
      "events": {},
      "iterate": {
        "array": "",
        "variable": "",
        "trackByIndex": false
      },
      "styles": [
        {
          "property": "width",
          "value": "90%",
          "enabled": true
        }
      ],
      "children": [],
      "comments": ""
    },
    {
      "name": "div",
      "nodeName": "div",
      "elementId": "",
      "attributes": [
        {
          "property": "data-id",
          "value": "d-IiAE"
        }
      ],
      "classList": [],
      "conditionalClasses": [],
      "contentType": "text",
      "displayExpression": "",
      "events": {},
      "iterate": {
        "array": "",
        "variable": "",
        "trackByIndex": false
      },
      "styles": [
        {
          "property": "width",
          "value": "90%",
          "enabled": true
        },
        {
          "property": "margin",
          "value": "0 auto",
          "enabled": true
        },
        {
          "property": "padding-top",
          "value": "30px",
          "enabled": true
        }
      ],
      "children": [
        {
          "name": "div",
          "nodeName": "div",
          "elementId": "",
          "attributes": [
            {
              "property": "data-id",
              "value": "n992fY"
            }
          ],
          "classList": [],
          "conditionalClasses": [],
          "contentType": "text",
          "displayExpression": "",
          "events": {},
          "iterate": {
            "array": "",
            "variable": "",
            "trackByIndex": false
          },
          "styles": [
            {
              "property": "padding-top",
              "value": "20px",
              "enabled": true
            }
          ],
          "children": [],
          "comments": ""
        },
        {
          "name": "Table",
          "nodeName": "bln-table",
          "elementId": "",
          "attributes": [
            {
              "property": "data-id",
              "value": "kNxSLM"
            },
            {
              "property": "core",
              "value": ""
            }
          ],
          "classList": [],
          "conditionalClasses": [],
          "contentType": "text",
          "displayExpression": "",
          "events": {},
          "iterate": {
            "array": "",
            "variable": "",
            "trackByIndex": false
          },
          "styles": [
            {
              "property": "--bln-table-header-bg-color",
              "value": "#DEF2F1",
              "enabled": true
            },
            {
              "property": "--bln-table-header-text-color",
              "value": "#17252A",
              "enabled": true
            },
            {
              "property": "--bln-table-secondary-bg-color",
              "value": "#fff",
              "enabled": true
            },
            {
              "property": "--bln-table-hovered-bg-color",
              "value": "#e6e6e6",
              "enabled": true
            },
            {
              "property": "--bln-table-highlight-color",
              "value": "#c2c2c2",
              "enabled": true
            },
            {
              "property": "--bln-table-text-color",
              "value": "#17252A",
              "enabled": true
            },
            {
              "property": "--bln-table-highlight-text-color",
              "value": "#17252A",
              "enabled": true
            },
            {
              "property": "--bln-table-border-color",
              "value": "#17252A",
              "enabled": true
            }
          ],
          "children": [],
          "comments": "",
          "type": "core-component",
          "id": "table",
          "expressions": [
            {
              "expression": "$ctrl.pagination.paginatedRoles",
              "to": "data"
            },
            {
              "expression": "true",
              "to": "enableRowSelection"
            },
            {
              "expression": "$ctrl.selected.selectRole(row)",
              "to": "onSelection"
            }
          ]
        },
        {
          "name": "Pagination",
          "nodeName": "bln-pagination",
          "elementId": "",
          "attributes": [
            {
              "property": "data-id",
              "value": "WxoN6d"
            },
            {
              "property": "core",
              "value": ""
            }
          ],
          "classList": [],
          "conditionalClasses": [],
          "contentType": "text",
          "displayExpression": "",
          "events": {},
          "iterate": {
            "array": "",
            "variable": "",
            "trackByIndex": false
          },
          "styles": [],
          "children": [],
          "comments": "",
          "type": "core-component",
          "id": "pagination",
          "expressions": [
            {
              "expression": "$ctrl.pagination.currentPage",
              "to": "currentPage"
            },
            {
              "expression": "$ctrl.pagination.totalPages",
              "to": "totalPages"
            },
            {
              "expression": "$ctrl.pagination.paginatedRoles = $ctrl.rolesArray.slice($ctrl.pagination.currentPage * $ctrl.pagination.pageSize - $ctrl.pagination.pageSize, $ctrl.pagination.pageSize * $ctrl.pagination.currentPage)",
              "to": "onPageChange"
            }
          ]
        }
      ],
      "comments": ""
    }
  ]
}